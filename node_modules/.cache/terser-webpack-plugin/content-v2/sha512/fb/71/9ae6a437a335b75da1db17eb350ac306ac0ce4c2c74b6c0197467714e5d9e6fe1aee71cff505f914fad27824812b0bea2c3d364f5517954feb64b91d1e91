{"map":"{\"version\":3,\"sources\":[\"/Users/developer/Documents/appasaheb4/project/react/stmichaelschoolweb/src/screen/LoginScreen/LoginScreen.tsx\",\"/Users/developer/Documents/appasaheb4/project/react/stmichaelschoolweb/src/serviceWorker.ts\",\"/Users/developer/Documents/appasaheb4/project/react/stmichaelschoolweb/src/index.tsx\"],\"names\":[\"LoginScreen\",\"props\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"data\",\"_this2\",\"console\",\"log\",\"axios\",\"get\",\"then\",\"response\",\"setState\",\"catch\",\"error\",\"alert\",\"react_default\",\"a\",\"createElement\",\"className\",\"style\",\"textAlign\",\"onSubmit\",\"click_Login\",\"bind\",\"map\",\"item\",\"key\",\"id\",\"value\",\"type\",\"placeholder\",\"required\",\"href\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"LoginScreen_LoginScreen\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"sPAMqBA,qBACnB,SAAAA,EAAYC,GAAY,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACtBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,KAAM,IAJcR,mFAQJ,IAAAS,EAAAN,KAClBO,QAAQC,IAAI,QAEZC,EAAAA,EACGC,IAAI,qBACJC,KAAK,SAAAC,GACJ,IAAIP,EAAOO,EAASP,KACpBC,EAAKO,SAAS,CAAER,KAAMA,EAAKA,SAE5BS,MAAM,SAASC,GACdR,QAAQC,IAAIO,2CAOhBC,MAAM,uCAIN,OACEC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,KAAA,CAAIE,MAAO,CAAEC,UAAW,WAAxB,uBACAL,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAA,CAAMI,SAAUvB,KAAKwB,YAAYC,KAAKzB,OACpCiB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAA,CAAQC,UAAU,8CACfpB,KAAKI,MAAMC,KAAKqB,IAAI,SAACC,GAAD,OACnBV,EAAAC,EAAAC,cAAA,SAAA,CAAQS,IAAKD,EAAKE,GAAIC,MAAOH,EAAKI,MAC/BJ,EAAKI,UAKdd,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,QAAA,CACEY,KAAK,QACLX,UAAU,eACVY,YAAY,QACZC,UAAQ,KAGZhB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,QAAA,CACEY,KAAK,WACLX,UAAU,eACVY,YAAY,WACZC,UAAQ,KAGZhB,EAAAC,EAAAC,cAAA,MAAA,CAAKE,MAAO,CAAEC,UAAW,WACvBL,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,QAAA,CACEY,KAAK,SACLX,UAAU,kBACVU,MAAM,WAGVb,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,IAAA,CAAGe,KAAK,IAAId,UAAU,aAAtB,iCAtEuBe,EAAAA,YCMrBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,EAAAA,EAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAAiBC,SAASC,eAAe,SDoInD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from \\\"react\\\";\\nimport axios from \\\"axios\\\";\\n//Css Files\\nimport \\\"./LoginScree.css\\\";\\nimport { any } from \\\"prop-types\\\";\\n\\nexport default class LoginScreen extends Component<any, any> {\\n  constructor(props: any) {\\n    super(props);\\n\\n    this.state = {\\n      data: []\\n    };\\n  }\\n\\n  componentDidMount() {\\n    console.log(\\\"call\\\");\\n\\n    axios\\n      .get(\\\"/api/getUserTypes\\\")\\n      .then(response => {\\n        let data = response.data;\\n        this.setState({ data: data.data });\\n      })  \\n      .catch(function(error) {\\n        console.log(error);\\n      });\\n  }  \\n\\n  //TODO: func click_Login\\n\\n  click_Login(){\\n    alert('hi')\\n  }\\n\\n  render() {\\n    return (\\n      <div className=\\\"container\\\">\\n        <div className=\\\"col-md-offset-4 col-md-4\\\">\\n          <h1 style={{ textAlign: \\\"center\\\" }}>St Michael's school</h1>\\n          <div className=\\\"well\\\">  \\n            <form onSubmit={this.click_Login.bind(this)}>\\n              <div className=\\\"form-group\\\">\\n                <select className=\\\"form-control browser-default custom-select\\\">\\n                  {this.state.data.map((item: any) => (\\n                    <option key={item.id} value={item.type}>\\n                      {item.type}\\n                    </option>\\n                  ))}\\n                </select>\\n              </div>\\n              <div className=\\\"form-group\\\">\\n                <input\\n                  type=\\\"email\\\"\\n                  className=\\\"form-control\\\"\\n                  placeholder=\\\"Email\\\"\\n                  required\\n                />\\n              </div>\\n              <div className=\\\"form-group\\\">\\n                <input\\n                  type=\\\"password\\\"\\n                  className=\\\"form-control\\\"\\n                  placeholder=\\\"Password\\\"\\n                  required\\n                />\\n              </div>\\n              <div style={{ textAlign: \\\"center\\\" }}>\\n                <div className=\\\"form-group\\\">\\n                  <input\\n                    type=\\\"submit\\\"\\n                    className=\\\"btn btn-primary\\\"\\n                    value=\\\"Login\\\"\\n                  />\\n                </div>\\n                <div className=\\\"form-group\\\">\\n                  <a href=\\\"#\\\" className=\\\"ForgetPwd\\\">\\n                    Forget Password?\\n                  </a>\\n                </div>\\n              </div>\\n            </form>\\n          </div>\\n        </div>\\n      </div>\\n    );\\n  }\\n}\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n   \\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\ntype Config = {\\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\\n};\\n\\nexport function register(config?: Config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(\\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\\n      window.location.href\\n    );\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl: string, config?: Config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport LoginScreen from \\\"./screen/LoginScreen/LoginScreen\\\";\\nimport * as serviceWorker from \\\"./serviceWorker\\\";  \\n     \\nReactDOM.render(<LoginScreen />, document.getElementById(\\\"root\\\"));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\\n\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{16:function(e,t,a){e.exports=a(43)},41:function(e,t,a){},43:function(e,t,a){\"use strict\";a.r(t);var n=a(0),o=a.n(n),r=a(9),c=a.n(r),l=a(10),s=a(11),i=a(14),m=a(12),u=a(15),d=a(13),p=a.n(d),f=(a(41),function(e){function t(e){var a;return Object(l.a)(this,t),(a=Object(i.a)(this,Object(m.a)(t).call(this,e))).state={data:[]},a}return Object(u.a)(t,e),Object(s.a)(t,[{key:\"componentDidMount\",value:function(){var e=this;console.log(\"call\"),p.a.get(\"/api/getUserTypes\").then(function(t){var a=t.data;e.setState({data:a.data})}).catch(function(e){console.log(e)})}},{key:\"click_Login\",value:function(){alert(\"hi\")}},{key:\"render\",value:function(){return o.a.createElement(\"div\",{className:\"container\"},o.a.createElement(\"div\",{className:\"col-md-offset-4 col-md-4\"},o.a.createElement(\"h1\",{style:{textAlign:\"center\"}},\"St Michael's school\"),o.a.createElement(\"div\",{className:\"well\"},o.a.createElement(\"form\",{onSubmit:this.click_Login.bind(this)},o.a.createElement(\"div\",{className:\"form-group\"},o.a.createElement(\"select\",{className:\"form-control browser-default custom-select\"},this.state.data.map(function(e){return o.a.createElement(\"option\",{key:e.id,value:e.type},e.type)}))),o.a.createElement(\"div\",{className:\"form-group\"},o.a.createElement(\"input\",{type:\"email\",className:\"form-control\",placeholder:\"Email\",required:!0})),o.a.createElement(\"div\",{className:\"form-group\"},o.a.createElement(\"input\",{type:\"password\",className:\"form-control\",placeholder:\"Password\",required:!0})),o.a.createElement(\"div\",{style:{textAlign:\"center\"}},o.a.createElement(\"div\",{className:\"form-group\"},o.a.createElement(\"input\",{type:\"submit\",className:\"btn btn-primary\",value:\"Login\"})),o.a.createElement(\"div\",{className:\"form-group\"},o.a.createElement(\"a\",{href:\"#\",className:\"ForgetPwd\"},\"Forget Password?\")))))))}}]),t}(n.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(o.a.createElement(f,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[16,2,1]]]);","extractedComments":[]}